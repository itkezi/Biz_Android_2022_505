<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".FirstFragment">

    <!--
    ConstraintLayout
    안드로이드에서 반응형 화면을 구현하기 위한 Layout
    RelativeLayout을 많이 사용했는데 최근에는 Relative보다 Constraint를 더 많이 사용한다

    내부에 포함하는 Component를 마치 고무줄로 당기는 것처럼 배치한다

    조각화 : 안드로이드 관련 디바이스의 화면 크기가 매우 다양하다

    조각화 현상에 맞춰 반응형 화면을 구형하기 위한 도구가 새로 만들어졌다

    layout_width, layout_height
    match_parent : 나를 감싸고 있는 부모 창의 크기만큼 늘려라
    wrap_content : 내가 포함하고 있는 text 등의 크기만큼만 늘려서 유지하라

    다른 컴포넌트를 감싸고 있는 box 형태의 도구를 화면 가득 채우고자 할 때는
    width와 height를 0dp로 설정하고 constraint 설정을 한다

    안드로이드 단위
    px : 고정크기, 절대 단위
    dpi : 화면 1인치 들어가는 픽셀 단위
    dp : 화면 크기에 관계없이 고정된 크기 (화면에 따라 사이즈가 달라지지 않는다)
        , 밀도 독립 픽셀 단위
    sp : 시스템의 글꼴 크기에 따라 변동되는 단위, 스케일 독립 단위

    -->

    <EditText
        android:id="@+id/textview_first"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Hello"
        android:textSize="80dp"
        app:layout_constraintBottom_toTopOf="@id/button_first"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent" />

    <Button
        android:id="@+id/button_first"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="@string/next"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@id/textview_first" />
</androidx.constraintlayout.widget.ConstraintLayout>